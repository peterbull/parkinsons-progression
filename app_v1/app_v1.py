# AUTOGENERATED! DO NOT EDIT! File to edit: ../pb_parkinsons_prog.ipynb.

# %% auto 0
__all__ = ['comp', 'path', 'df_train_proteins', 'df_train_clinical', 'df_train_peptides', 'df_supplemental', 'df_train',
           'dep_var', 'procs', 'cont', 'cat', 'splits', 'to', 'dls', 'xs', 'ys', 'valid_xs', 'valid_ys', 'learn',
           'SMAPE']

# %% ../pb_parkinsons_prog.ipynb 7
from fastai.tabular.all import *

pd.options.display.max_rows = 20
pd.options.display.max_columns = 8

# %% ../pb_parkinsons_prog.ipynb 8
try: import fastkaggle
except ModuleNotFoundError:
    !pip install -Uq fastkaggle

from fastkaggle import *

# %% ../pb_parkinsons_prog.ipynb 10
comp = 'amp-parkinsons-disease-progression-prediction'
path = setup_comp(comp, install='fastai')

# %% ../pb_parkinsons_prog.ipynb 11
df_train_proteins = pd.read_csv(path/"train_proteins.csv", low_memory=False)
df_train_clinical = pd.read_csv(path/"train_clinical_data.csv", low_memory=False)
df_train_peptides = pd.read_csv(path/"train_peptides.csv", low_memory=False)
df_supplemental = pd.read_csv(path/"supplemental_clinical_data.csv", low_memory=False)

# %% ../pb_parkinsons_prog.ipynb 15
df_train = df_train_proteins.merge(df_train_clinical, on=['patient_id', 'visit_id', 'visit_month'], how='left')

# %% ../pb_parkinsons_prog.ipynb 19
dep_var = ['updrs_1', 'updrs_2', 'updrs_3', 'updrs_4']

# %% ../pb_parkinsons_prog.ipynb 20
procs = [Categorify, FillMissing, Normalize]
cont, cat = cont_cat_split(df_train, dep_var=dep_var, max_card=1)
splits = RandomSplitter(valid_pct=0.2)(range_of(df_train))

# %% ../pb_parkinsons_prog.ipynb 21
to = TabularPandas(df_train, procs, cat, cont, y_names=dep_var, splits=splits)

# %% ../pb_parkinsons_prog.ipynb 25
class SMAPE(Metric):
    def __init__(self):
        super().__init__()
    
    def reset(self):
        self.total = 0.
        self.count = 0
        
    def accumulate(self, learn):
        pred,targ = learn.pred, learn.y
        self.total += torch.abs(pred - targ) / (torch.abs(pred) + torch.abs(targ))
        self.count += 1
    
    @property
    def value(self):
        return (self.total / self.count).mean().item() * 100  # SMAPE in percentage
    
    @property
    def name(self):
        return 'smape'

# %% ../pb_parkinsons_prog.ipynb 26
dls = to.dataloaders(bs=256)

# %% ../pb_parkinsons_prog.ipynb 29
xs, ys = to.train.xs, to.train.ys
valid_xs, valid_ys = to.valid.xs, to.valid.ys

# %% ../pb_parkinsons_prog.ipynb 32
learn = tabular_learner(dls, layers=[200,100], metrics=[accuracy_multi], n_out=4, y_range=(0, 80), loss_func=mse)

# %% ../pb_parkinsons_prog.ipynb 34
learn.fit_one_cycle(3, 1e-3)
